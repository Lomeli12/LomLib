buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

task loadProperties{
    def prop = new Properties()
    File configFile = new File('build.properties')
    if (configFile.isFile()) {
        prop.load(new FileInputStream(configFile))
    }
    project.ext.config = new ConfigSlurper().parse prop
}

repositories {
    maven {
        name = 'codechicken'
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = 'progwml6'
        url "http://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    //compile "codechicken:CodeChickenCore:1.8-${config.cccVersion:dev}"
    //compile "codechicken:NotEnoughItems:1.8-${config.neiVersion:dev}"
    //compile "codechicken:CodeChickenLib:1.8-${config.cclVersion:dev}"
    deobfCompile "mezz.jei:jei_${config.mcVersion}:${config.jeiVersion}"
}

group = config.group
archivesBaseName = config.baseName
version = config.releaseVersion
sourceCompatibility = config.targetJDK
targetCompatibility = config.targetJDK

minecraft {
    version = "${config.mcVersion}-${config.mcfVersion}"
    runDir = "run"
    replace '@VERSION@', project.version
    mappings = config.mcpMap
}

processResources {
    exclude '**/xcf/**'

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'dependancies.info'
    }
}

jar {
    manifest {
        attributes("FMLAT" : "lomlib_at.cfg")
    }
    appendix = config.mcVersion
    classifier = "universal"
}

sourceJar {
    appendix = config.mcVersion
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = config.mcVersion
    classifier = "dev"
    manifest {
        attributes("FMLAT" : "lomlib-deobf_at.cfg")
    }
}

tasks.withType(Zip) { task ->
    task.doLast {
        ant.checksum algorithm: 'MD5', file: it.archivePath
        ant.checksum algorithm: 'SHA1', file: it.archivePath
    }
}

task writeNewPom << {
    pom {
        project {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            inceptionYear new Date().format("yyyy")
            licenses {
                license {
                    name config.licenseName
                    url config.licenseURL
                    distribution 'repo'
                }
            }
        }
    }.writeTo("build/libs/pom.xml")
}

build.dependsOn sourceJar, deobfJar, writeNewPom
