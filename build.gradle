buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

def loadProperties(String sourceFileName) {
    def config = new Properties()
    def propFile = new File(sourceFileName)
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext[property.key] = property.value;
        }
    }
}

loadProperties 'build.properties'

repositories {
    maven {
        name = 'codechicken'
        url = "http://chickenbones.net/maven/"
    }
}

dependencies {
    compile "codechicken:CodeChickenCore:$mcVersion-$cccVersion:dev"
    compile "codechicken:NotEnoughItems:$mcVersion-$neiVersion:dev"
    compile "codechicken:CodeChickenLib:$mcVersion-$cclVersion:dev"
}

group = 'net.lomeli.lomlib'
archivesBaseName = 'LomLib'
version = "$releaseVersion"

minecraft {
    version = "1.8-11.14.3.1519" // grab latest forge
    runDir = "run"
    mappings = "snapshot_20141130"
}

processResources {
    exclude '**/xcf/**'

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'dependancies.info'
    }
}

jar {
    manifest {
        attributes("FMLAT" : "lomlib_at.cfg")
    }
    appendix = "$mcVersion"
    classifier = "universal"
}

sourceJar {
    appendix = "$mcVersion"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = "$mcVersion"
    classifier = "dev"
    manifest {
        attributes("FMLAT" : "lomlib-deobf_at.cfg")
    }
}

tasks.withType(Zip) { task ->
    task.doLast {
        ant.checksum algorithm: 'MD5', file: it.archivePath
        ant.checksum algorithm: 'SHA1', file: it.archivePath
    }
}

build.dependsOn sourceJar, deobfJar