buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

repositories {
    maven {
        name = 'codechicken'
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = 'progwml6'
        url "http://dvs1.progwml6.com/files/maven"
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    deobfCompile "mezz.jei:jei_${mcVersion}:${jeiVersion}"
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    compile "org.jetbrains.kotlin:kotlin-runtime:${kotlinVersion}"
}

group = "${group}"
archivesBaseName = "${baseName}"
version = "${releaseVersion}"

sourceCompatibility = targetCompatibility = "${targetJDK}" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "${targetJDK}"
}

minecraft {
    version = "${mcVersion}-${mcfVersion}"
    runDir = "run"
    replace '@VERSION@', project.version
    mappings = "${mcpMap}"
}

processResources {
    exclude '**/xcf/**'
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "kotlinversion", "${kotlinVersion}"

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version, 'kotlinversion':"${kotlinVersion}"
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes("FMLAT": "lomlib_at.cfg", "FMLCorePluginContainsFMLMod": "true", "FMLCorePlugin": "net.lomeli.lomlib.asm.LomLibPlugin")
    }
    appendix = "${mcVersion}"
    classifier = "universal"
}

sourceJar {
    appendix = "${mcVersion}"
}

shadowJar {
    appendix = "${mcVersion}"
    classifier = "universal"
    exclude 'mezz/jei/**'
    relocate 'kotlin', 'net.lomeli.lomlib.repack.kotlin'
    relocate 'jet.runtime.typeinfo', 'net.lomeli.lomlib.repack.jet.runtime.typeinfo'
    relocate 'org.jetbrains.annotations', 'net.lomeli.lomlib.repack.org.jetbrains.annotations'
}

reobf {
    shadowJar { mappingType }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = "${mcVersion}"
    classifier = "dev"
    manifest {
        attributes("FMLAT": "lomlib-deobf_at.cfg", "FMLCorePluginContainsFMLMod": "true", "FMLCorePlugin": "net.lomeli.lomlib.asm.LomLibPlugin")
    }
}

tasks.withType(Zip) { task ->
    task.doLast {
        ant.checksum algorithm: 'MD5', file: it.archivePath
        ant.checksum algorithm: 'SHA1', file: it.archivePath
    }
}

task writeNewPom << {
    pom {
        project {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            inceptionYear new Date().format("yyyy")
            licenses {
                license {
                    name "${licenseName}"
                    url "${licenseURL}"
                    distribution 'repo'
                }
            }
        }
    }.writeTo("build/libs/pom.xml")
}

build.dependsOn writeNewPom, reobfShadowJar, deobfJar

artifacts {
    archives shadowJar
}
